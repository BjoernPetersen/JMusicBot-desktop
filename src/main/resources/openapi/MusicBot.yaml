openapi: 3.0.1
info:
  title: MusicBot
  description: >
    HTTP API for the MusicBot project.
  version: 0.10.0
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
- url: /v2
security:
- Token: []
paths:
  /user:
    post:
      operationId: registerUser
      summary: Registers a new user.
      security: []
      description: >
        Registers a new guest user. The user will be deleted when the bot is restarted.
        Guest users can be upgraded to full users, who will not be deleted,
        by setting a password chosen by the user.
        Users are identified by their username.
      requestBody:
        required: true
        description: The new user's credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCredentials'
      responses:
        201:
          description: An authorization token.
          content:
            text/plain:
              schema:
                type: string
        409:
          description: Username already in use.
          content:
            text/plain:
              schema:
                type: string
    put:
      operationId: changePassword
      summary: Sets a new password.
      description: >
        Sets a new password for the caller.
        If the user was a guest account, this makes him a full user.
      security:
      - Token: []
      requestBody:
        required: true
        description: The users new password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        200:
          description: A new Authorization token.
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid new password.
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: deleteUser
      summary: Deletes a user
      description: Deletes the user associated with the Authorization token.
      security:
      - Basic: []
      - Token: []
      responses:
        204:
          description: Successfully deleted.
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
  /token:
    get:
      operationId: loginUser
      summary: Retrieves a token for a user
      security:
      - Basic: []
      description: >
        Retrieves an Authorization token for a user.
      responses:
        200:
          description: An authorization token.
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Unknown user.
          content:
            text/plain:
              schema:
                type: string
  /player:
    get:
      operationId: getPlayerState
      summary: Returns the current player state.
      description: >
        Returns the current player state. If the state is PLAY or PAUSE, it also
        contains the current song.
      responses:
        200:
          description: A PlayerState
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerState'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
    put:
      operationId: setPlayerState
      summary: Pauses the player.
      description: >
        Pauses the current playback. If the current player state is not PLAY,
        does nothing.
      requestBody:
        required: true
        description: The desired player state change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStateChange'
      responses:
        200:
          description: The new PlayerState.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerState'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
  /player/queue/history:
    get:
      operationId: getRecentQueue
      summary: Returns a list of recently played songs.
      responses:
        200:
          description: A list of song entries. Sorted least to most recently played.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongEntry'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
  /player/queue:
    get:
      operationId: getQueue
      summary: Returns the current player queue.
      responses:
        200:
          $ref: '#/components/responses/Queue'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
    put:
      operationId: enqueue
      summary: Adds a Song to the queue
      description: >
        Adds the specified Song to the current queue. If the queue already
        contains the Song, it won't be added.
      parameters:
      - name: songId
        in: query
        description: The song's ID
        required: true
        schema:
          type: string
      - name: providerId
        in: query
        description: The ID of the provider the song is from.
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Queue'
        400:
          $ref: '#/components/responses/ParameterIsMissing'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/SongNotFound'
    delete:
      operationId: dequeue
      summary: Removes a Song from the queue.
      description: >
        Removes the specified Song from the current queue. If the queue did not
        contain the song, nothing happens.
      parameters:
      - name: songId
        in: query
        schema:
          type: string
        description: the song ID of the song to dequeue.
        required: true
      - name: providerId
        in: query
        schema:
          type: string
        description: the provider ID of the song to dequeue.
        required: true
      responses:
        200:
          $ref: '#/components/responses/Queue'
        400:
          $ref: '#/components/responses/ParameterIsMissing'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/SongNotFound'
  /player/queue/order:
    put:
      operationId: moveEntry
      summary: Moves a song entry to another index in the queue.
      parameters:
      - name: index
        in: query
        description: The index to move to.
        schema:
          type: integer
          minimum: 0
        required: true
      requestBody:
        description: The song entry to move.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueEntry'
      responses:
        200:
          $ref: '#/components/responses/Queue'
        400:
          $ref: '#/components/responses/ParameterIsMissing'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
  /provider:
    get:
      operationId: getProviders
      summary: Returns a list of all available providers.
      responses:
        200:
          description: A list of unique provider IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedPlugin'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
  '/provider/{providerId}':
    get:
      operationId: searchSong
      summary: Searches for songs
      parameters:
      - name: providerId
        in: path
        schema:
          type: string
        description: The provider with which to search.
        required: true
      - name: query
        in: query
        description: A search query
        required: true
        schema:
          type: string
      responses:
        200:
          description: A list of results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        400:
          $ref: '#/components/responses/ParameterIsMissing'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Invalid provider ID.
          content:
            text/plain:
              schema:
                type: string
                example: Invalid provider
  '/provider/{providerId}/{songId}':
    get:
      operationId: lookupSong
      summary: Looks up a song
      description: Looks up a song using its ID and a provider ID.
      parameters:
      - name: songId
        in: path
        description: A song ID
        schema:
          type: string
        required: true
      - name: providerId
        in: path
        description: A provider ID
        schema:
          type: string
        required: true
      responses:
        200:
          description: The looked up song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          $ref: '#/components/responses/ParameterIsMissing'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/SongNotFound'
  /suggester:
    get:
      operationId: getSuggesters
      summary: Returns a list of all available suggesters.
      responses:
        200:
          description: A list of unique suggester IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedPlugin'
  '/suggester/{suggesterId}':
    get:
      operationId: suggestSong
      summary: Returns a list of suggestions.
      parameters:
      - name: suggesterId
        in: path
        description: A suggester ID
        schema:
          type: string
        required: true
      - name: max
        in: query
        description: The maximum size of the response. Defaults to 32.
        schema:
          type: integer
          default: 32
          minimum: 1
          maximum: 64
        required: false
      responses:
        200:
          description: A list of suggested songs.
          content:
            application/json:
              schema:
                type: array
                maxItems: 64
                items:
                  $ref: '#/components/schemas/Song'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Suggester not found.
          content:
            text/plain:
              schema:
                type: string
                example: 'Suggester not found: Napster'
    delete:
      operationId: removeSuggestion
      summary: Removes a song from the suggestions.
      parameters:
      - name: suggesterId
        in: path
        description: the ID of the suggester.
        schema:
          type: string
        required: true
      - name: songId
        in: query
        description: The ID of the song to remove.
        schema:
          type: string
        required: true
      - name: providerId
        in: query
        description: The ID of the provider of the song to remove.
        schema:
          type: string
        required: true
      responses:
        204:
          description: >
            Success. Will also be the case if the song was not in the current suggestions.
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Song or Provider not found.
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    NamedPlugin:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
          example: net.bjoernpetersen.spotify.SpotifyProvider
        name:
          type: string
          example: Google Play Music
    Song:
      type: object
      required:
      - id
      - provider
      - title
      - description
      properties:
        id:
          type: string
        provider:
          $ref: '#/components/schemas/NamedPlugin'
        title:
          type: string
          description: The title of a song. Most important identifier for human readers.
          example: Never gonna give you up
          minLength: 1
        description:
          type: string
          description: The description of a song. Might be the artist. May also be empty.
          minLength: 0
          example: Rick Astley
        duration:
          type: integer
          description: Duration of the song in seconds.
          minimum: 0
          example: 180
        albumArtUrl:
          type: string
          description: The URL pointing to an album art for this song.
          example: 'http://example.com/image.png'
    PlayerState:
      type: object
      required:
      - state
      properties:
        state:
          type: string
          enum:
          - PLAY
          - PAUSE
          - STOP
          - ERROR
        songEntry:
          $ref: '#/components/schemas/SongEntry'
    PlayerStateChange:
      type: object
      required:
      - action
      properties:
        action:
          type: string
          enum:
          - PLAY
          - PAUSE
          - SKIP
    SongEntry:
      type: object
      required:
      - song
      properties:
        song:
          $ref: '#/components/schemas/Song'
        userName:
          description: >
            The user who put the song in the queue. May be missing if it was auto suggested.
          type: string
    QueueEntry:
      type: object
      required:
      - song
      - userName
      properties:
        song:
          $ref: '#/components/schemas/Song'
        userName:
          description: The user who put the song in the queue.
          type: string
    RegisterCredentials:
      type: object
      required:
      - name
      - userId
      properties:
        name:
          description: The user name.
          type: string
        userId:
          description: Some unique identifier for the user. Typically a UUID or Android device ID.
          type: string
    PasswordChange:
      type: object
      required:
      - newPassword
      properties:
        newPassword:
          description: The new password.
          type: string
    AuthExpectation:
      type: object
      required:
      - format
      properties:
        format:
          description: The required authentication format.
          type: string
          enum:
          - Token
          - Basic
        type:
          description: >
            Basic auth: If authorization failed, this describes the type of the user the login attempt was for.
            If the user is a Full user, a password is expected. Otherwise some unique identifier.
          type: string
          enum:
          - Guest
          - Full
        permissions:
          description: >
            Token auth: Required permissions for the endpoint.
          type: array
          items:
            type: string
  securitySchemes:
    Token:
      type: http
      scheme: bearer
      description: An API key issued by server.
      bearerFormat: jwt
    Basic:
      type: http
      scheme: basic
      description: Basic HTTP auth with username and password.
  responses:
    ParameterIsMissing:
      description: A parameter is missing.
      content:
        application/json:
          schema:
            type: string
            example: 'Missing parameter: <PARAMETER_NAME>'
    SongNotFound:
      description: The song could not be found.
      content:
        application/json:
          schema:
            type: string
            example: 'Song not found.'
    Queue:
      description: The current player queue.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/QueueEntry'
    Unauthenticated:
      description: >
        The called endpoint requires authentication, which was not provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthExpectation'
    Unauthorized:
      description: >
        The called endpoint has specific permission requirements, which were not met.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthExpectation'
