swagger: '2.0'
info:
  version: 0.1.0
  title: JMusicBot
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /player:
    get:
      operationId: getPlayerState
      summary: Returns the current player state
      description: >-
        Returns the current player state. If the state is PLAY or PAUSE, it also
        contains the current song.
      responses:
        '200':
          description: A PlayerState
          schema:
            $ref: '#/definitions/PlayerState'
  /player/pause:
    put:
      operationId: pausePlayer
      summary: Pauses the player
      description: >-
        Pauses the current playback. If the current player state is not PLAY,
        does nothing.
      responses:
        '200':
          description: A PlayerState
          schema:
            $ref: '#/definitions/PlayerState'
  /player/play:
    put:
      operationId: resumePlayer
      summary: Resumes the player
      description: >-
        Pauses the current playback. If the current player state is not PAUSE,
        does nothing.
      responses:
        '200':
          description: A PlayerState
          schema:
            $ref: '#/definitions/PlayerState'
  /player/queue:
    get:
      operationId: getQueue
      summary: Returns the current player queue
      responses:
        '200':
          description: A list of Songs
          schema:
            $ref: '#/definitions/Queue'
    put:
      operationId: enqueue
      summary: Adds a Song to the queue
      description: >-
        Adds the specified Song to the current queue. If the queue already
        contains the Song, it won't be added.
      parameters:
        - name: songId
          in: query
          description: The song's ID
          type: string
          required: true
        - name: providerId
          in: query
          description: The ID of the provider the song is from
          type: string
          required: true
      responses:
        '200':
          description: The new queue
          schema:
            $ref: '#/definitions/Queue'
        '400':
          $ref: '#/responses/ParameterIsMissingResponse'
        '404':
          $ref: '#/responses/SongNotFoundResponse'
    delete:
      operationId: dequeue
      summary: Removes a Song from the queue
      description: >-
        Removes the specified Song from the current queue. If the queue did not
        contain the song, nothing is done.
      parameters:
        - name: songId
          in: query
          description: the song's ID
          type: string
          required: true
        - name: providerId
          in: query
          description: The ID of the provider the song is from
          type: string
          required: true
      responses:
        '200':
          description: The new queue
          schema:
            $ref: '#/definitions/Queue'
        '400':
          $ref: '#/responses/ParameterIsMissingResponse'
        '404':
          $ref: '#/responses/SongNotFoundResponse'
  /provider:
    get:
      operationId: getProviders
      summary: Returns a list of all available providers
      responses:
        '200':
          description: A list of unique provider IDs
          schema:
            type: array
            items:
              type: string
              example: spotify
  /search:
    get:
      operationId: search
      summary: Searches for songs
      parameters:
        - name: providerId
          in: query
          description: The ID of the provider to search with
          type: string
          required: true
        - name: query
          in: query
          description: A search query
          required: true
          type: string
      responses:
        '200':
          description: A list of results
          schema:
            type: array
            items:
              $ref: '#/definitions/Song'
        '400':
          $ref: '#/responses/ParameterIsMissingResponse'
        '404':
          description: Invalid provider ID
          schema:
            type: string
            example: Invalid provider
  /lookup:
    get:
      operationId: lookup
      summary: Looks up a song
      description: Looks up a song using its ID and a provider ID
      parameters:
        - name: songId
          in: query
          description: A song ID
          type: string
          required: true
        - name: providerId
          in: query
          description: A provider ID
          type: string
          required: true
      responses:
        '200':
          description: The looked up song
          schema:
            $ref: '#/definitions/Song'
        '400':
          $ref: '#/responses/ParameterIsMissingResponse'
        '404':
          $ref: '#/responses/SongNotFoundResponse'
  /suggester:
    get:
      operationId: getSuggesters
      summary: Returns a list of all available suggesters
      responses:
        '200':
          description: A list of unique suggester IDs
          schema:
            type: array
            items:
              type: string
              example: spotify
  '/suggester/{suggesterId}':
    get:
      operationId: suggest
      summary: Returns a list of suggestions
      parameters:
        - name: suggesterId
          in: path
          description: A suggester ID
          type: string
          required: true
        - name: max
          in: query
          description: The maximum size of the response. Defaults to 16.
          type: integer
          required: false
      responses:
        '200':
          description: A list of suggested songs
          schema:
            type: array
            maxItems: 64
            items:
              $ref: '#/definitions/Song'
        '404':
          description: Suggester not found
          schema:
            type: string
            example: 'Suggester not found: Napster'
definitions:
  Song:
    type: object
    required:
      - id
      - providerId
      - title
      - description
    properties:
      id:
        type: string
      providerId:
        type: string
        example: spotify
      title:
        type: string
        description: 'The title of a song, most important identifier for human readers'
        example: Never gonna give you up
        minLength: 1
      description:
        type: string
        description: The description of a song. Might be the artist. May also be empty.
        minLength: 0
        example: Rick Astley
  PlayerState:
    type: object
    required:
      - state
    properties:
      state:
        type: string
        enum:
          - PLAY
          - PAUSE
          - STOP
          - ERROR
      song:
        $ref: '#/definitions/Song'
  Queue:
    type: array
    maxItems: 64
    items:
      $ref: '#/definitions/Song'
responses:
  ParameterIsMissingResponse:
    description: A parameter is missing
    schema:
      type: string
      example: 'Missing parameter: PARAMETER_NAME'
  SongNotFoundResponse:
    description: The song could not be found
    schema:
      type: string
      example: Song not found.
